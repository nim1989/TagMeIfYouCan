require 'rack/oauth2'
require 'rdf'
require 'rdf/ntriples'
include RDF

class FacebooksController < ApplicationController
  before_filter :require_authentication, :only => :destroy

  rescue_from Rack::OAuth2::Client::Error, :with => :oauth2_error

  def tag
    user_to_tag = Facebook.where(:identifier => params[:tag][:user_identifier]).first
    if user_to_tag.nil? 
      user_to_tag = Facebook.create(:identifier => params[:tag][:user_identifier])
    end

    # Prevent from duplicating a tag
    tag = Tag.where(:uri => params[:query_string]).first
    if tag.nil?
      name = CGI.unescape(params[:query_string].gsub('_', ' ').gsub('http://dbpedia.org/resource/', ' '))
      tag = Tag.create(:uri => params[:query_string], :name => name, :wikipedia_url => params[:tag][:wikipedia_url], :thumbnail => params[:tag][:thumbnail])
      tag.retrieve_info      
      tag.generate_director      
    end

    TagsFacebook.create(:tag => tag, :from_facebook_identifier => current_user.identifier, :facebook_identifier => user_to_tag.identifier, :status => Status.pending)
    respond_to do |format|
      format.html { redirect_to root_path }
    end    
  end
  
  def accept_tag
    tag = Tag.find(params[:tag_id])
    write_in_rdf(current_user.identifier, true, tag.uri)
    tag_facebook = TagsFacebook.where(:tag_id => params[:tag_id], :facebook_identifier => current_user.identifier).first
    tag_facebook.status = Status.validated
    tag_facebook.save    
    respond_to do |format|
      format.html { redirect_to root_path }
    end
  end

  def decline_tag
    write_in_rdf(current_user.identifier, false, tag.uri)
    
    tag_facebook = TagsFacebook.where(:tag_id => params[:tag_id], :facebook_identifier => current_user.identifier).first
    tag_facebook.status = Status.rejected
    tag_facebook.save
    respond_to do |format|
      format.html { redirect_to root_path }
    end
  end

  def return_tag
    TagsFacebook.create(:tag_id => params[:tag_id], :from_facebook_identifier => current_user.identifier, :facebook_identifier => params[:to_facebook_identifier])
    respond_to do |format|
      format.html { redirect_to root_path }
    end
  end
  
  # handle Facebook Auth Cookie generated by JavaScript SDK
  def show
    auth = Facebook.auth.from_cookie(cookies)
    authenticate Facebook.identify(auth.user)
    redirect_to root_url
  end

  # handle Normal OAuth flow: start
  def new
    client = Facebook.auth(callback_facebook_url).client
    redirect_to client.authorization_uri(
      :scope => Facebook.config[:scope]
    )
  end

  # handle Normal OAuth flow: callback
  def create
    client = Facebook.auth(callback_facebook_url).client
    client.authorization_code = params[:code]
    access_token = client.access_token!
    user = FbGraph::User.me(access_token).fetch
    authenticate Facebook.identify(user)
    
    friends = user.friends
    # Defining facebook people as fb_person
    begin
        graph = RDF::Graph.load('app/assets/rdf/people-film.nt', :format => :ntriples)
        RDF::Writer.open('app/assets/rdf/people-film.nt') do |writer|
            graph << [RDF::URI.new("http://www.facebook.com/" + user.identifier), RDF.type, RDF::FOAF.person]
            
            friends.each do |friend|
                graph << [RDF::URI.new("http://www.facebook.com/" + user.identifier), RDF::FOAF.knows, RDF::URI.new("http://www.facebook.com/" + friend.identifier)]
                graph << [RDF::URI.new("http://www.facebook.com/" + friend.identifier), RDF.type, RDF::FOAF.person]
            end
            
            writer << graph
        end
    rescue
        puts "An error occured - No such file" 
    end

    redirect_to root_url
  end

  def destroy
    unauthenticate
    redirect_to root_url
  end

  private
  
  def write_in_rdf(identifier, like = true, tag_uri)
    if like
        node = RDF::FOAF.like
    else
        node = RDF::FOAF.dislike
    end
    begin  
        graph = RDF::Graph.load('app/assets/rdf/people-film.nt', :format => :ntriples)
        triple = [RDF::URI.new("http://www.facebook.com/" + identifier), node, RDF::URI.new(tag_uri)]
        RDF::Writer.open('app/assets/rdf/people-film.nt') do |writer|
            if !graph.has_triple?(triple)
                graph << triple
            end
            writer << graph
        end
    rescue
        puts "An error occured - No such file" 
    end
  end
  
  def retrieve_tag_info tag
    if tag.thumbnail.empty?
      tag.retrieve_thumbnail
    end
    if tag.wikipedia_url.empty?
      tag.retrieve_wikipedia_url
    end
  end  
  
  def oauth2_error(e)
    flash[:error] = {
      :title => e.response[:error][:type],
      :message => e.response[:error][:message]
    }
    redirect_to root_url
  end
end
